
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.hluther.interpreter.parser;

import com.hluther.interpreter.lexer.Lexer;
import com.hluther.interpreter.ast.Instruction;
import com.hluther.interpreter.ast.Operation;
import com.hluther.interpreter.ast.OperationType;
import com.hluther.interpreter.ast.Assignment;
import com.hluther.interpreter.ast.AbstractSyntaxTree;
import java.util.LinkedList;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\020\000\002\002\004\000\002\002\003\000\002\003" +
    "\007\000\002\003\006\000\002\005\005\000\002\005\005" +
    "\000\002\005\003\000\002\006\005\000\002\006\005\000" +
    "\002\006\003\000\002\007\004\000\002\007\004\000\002" +
    "\007\003\000\002\004\005\000\002\004\003\000\002\004" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\040\000\004\014\004\001\002\000\004\012\040\001" +
    "\002\000\004\002\037\001\002\000\006\002\000\014\007" +
    "\001\002\000\004\012\010\001\002\000\014\004\016\005" +
    "\012\010\021\014\020\015\015\001\002\000\016\004\ufff8" +
    "\005\ufff8\006\ufff8\007\ufff8\011\ufff8\013\ufff8\001\002\000" +
    "\010\010\021\014\020\015\015\001\002\000\016\004\ufffb" +
    "\005\ufffb\006\030\007\027\011\ufffb\013\ufffb\001\002\000" +
    "\010\004\024\005\025\013\035\001\002\000\016\004\ufff3" +
    "\005\ufff3\006\ufff3\007\ufff3\011\ufff3\013\ufff3\001\002\000" +
    "\010\010\021\014\020\015\015\001\002\000\016\004\ufff5" +
    "\005\ufff5\006\ufff5\007\ufff5\011\ufff5\013\ufff5\001\002\000" +
    "\016\004\ufff2\005\ufff2\006\ufff2\007\ufff2\011\ufff2\013\ufff2" +
    "\001\002\000\014\004\016\005\012\010\021\014\020\015" +
    "\015\001\002\000\010\004\024\005\025\011\023\001\002" +
    "\000\016\004\ufff4\005\ufff4\006\ufff4\007\ufff4\011\ufff4\013" +
    "\ufff4\001\002\000\014\004\016\005\012\010\021\014\020" +
    "\015\015\001\002\000\014\004\016\005\012\010\021\014" +
    "\020\015\015\001\002\000\016\004\ufffc\005\ufffc\006\030" +
    "\007\027\011\ufffc\013\ufffc\001\002\000\014\004\016\005" +
    "\012\010\021\014\020\015\015\001\002\000\014\004\016" +
    "\005\012\010\021\014\020\015\015\001\002\000\016\004" +
    "\ufffa\005\ufffa\006\ufffa\007\ufffa\011\ufffa\013\ufffa\001\002" +
    "\000\016\004\ufff9\005\ufff9\006\ufff9\007\ufff9\011\ufff9\013" +
    "\ufff9\001\002\000\016\004\ufffd\005\ufffd\006\030\007\027" +
    "\011\ufffd\013\ufffd\001\002\000\016\004\ufff7\005\ufff7\006" +
    "\ufff7\007\ufff7\011\ufff7\013\ufff7\001\002\000\006\002\uffff" +
    "\014\uffff\001\002\000\016\004\ufff6\005\ufff6\006\ufff6\007" +
    "\ufff6\011\ufff6\013\ufff6\001\002\000\004\002\001\001\002" +
    "\000\014\004\016\005\012\010\021\014\020\015\015\001" +
    "\002\000\010\004\024\005\025\013\042\001\002\000\006" +
    "\002\ufffe\014\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\040\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\016\005\013\006\012\007\010\001\001\000" +
    "\002\001\001\000\004\004\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\016" +
    "\005\021\006\012\007\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\016\006\032\007\010\001\001" +
    "\000\010\004\016\006\025\007\010\001\001\000\002\001" +
    "\001\000\006\004\016\007\031\001\001\000\006\004\016" +
    "\007\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\016\005\040\006" +
    "\012\007\010\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    private AbstractSyntaxTree ast = null;

    public Parser(Lexer lexer) { 
        super(lexer);
    }

    public AbstractSyntaxTree getAst(){
        return this.ast;
    }

    public void syntax_error(java_cup.runtime.Symbol s){
       // musicInterpreterFrame.addError(new MError(s.left, s.right, ErrorType.SEMANTIC, "No se esperaba el lexema [" +s.value+ "]"));
    }

    public void unrecovered_syntax_error(java_cup.runtime.Symbol s){
        //musicInterpreterFrame.addError(new MError(s.left, s.right, ErrorType.SEMANTIC, "No se esperaba el lexema [" +s.value+ "]"));
    } 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= assignment 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruction> list = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ast = new AbstractSyntaxTree(list); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // assignment ::= assignment ID EQUAL arithmetic_op SEMICOLON 
            {
              LinkedList<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<Instruction> list = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction value = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = list; list.add(new Assignment(id, value)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // assignment ::= ID EQUAL arithmetic_op SEMICOLON 
            {
              LinkedList<Instruction> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction value = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.add(new Assignment(id, value)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // arithmetic_op ::= arithmetic_op PLUS arithmetic_exp1 
            {
              Instruction RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction value1 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction value2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.SUM); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_op",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // arithmetic_op ::= arithmetic_op MINUS arithmetic_exp1 
            {
              Instruction RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction value1 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction value2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.SUBTRACTION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_op",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // arithmetic_op ::= arithmetic_exp1 
            {
              Instruction RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction value = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = value; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_op",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // arithmetic_exp1 ::= arithmetic_exp1 ASTERISK arithmetic_exp2 
            {
              Instruction RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction value1 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction value2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.MULTIPLICATION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_exp1",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // arithmetic_exp1 ::= arithmetic_exp1 SLASH arithmetic_exp2 
            {
              Instruction RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction value1 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction value2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.DIVISION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_exp1",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // arithmetic_exp1 ::= arithmetic_exp2 
            {
              Instruction RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction value = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = value; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_exp1",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // arithmetic_exp2 ::= PLUS arithmetic_value 
            {
              Instruction RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction value = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(value, OperationType.PLUS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_exp2",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // arithmetic_exp2 ::= MINUS arithmetic_value 
            {
              Instruction RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction value = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(value, OperationType.MINUS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_exp2",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // arithmetic_exp2 ::= arithmetic_value 
            {
              Instruction RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction value = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = value; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_exp2",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arithmetic_value ::= PARENTHESISO arithmetic_op PARENTHESISC 
            {
              Instruction RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction value = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = value; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_value",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arithmetic_value ::= INTEGER 
            {
              Instruction RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(value); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_value",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // arithmetic_value ::= ID 
            {
              Instruction RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(value); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_value",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
